 //Name: Brandon Rubio

#include <stdio.h>
#include "document.h"
#include <string.h>


/*****************
This is a document manager program that allows for paragraphs to be
added to a docment, lines to be added to those paragraphs, removal of lines,
loading of data into the document, and printing the document.  
*****************/


/*Initializes the document by setting the name and 
  setting the number of paragraphs to zero.*/ 

int init_document(Document *doc, const char *name){
  /*  int name_length, i, j;*/
  /* char *ptr;*/

  if(doc == NULL || name == NULL || strlen(name) < 1 || strlen(name) > MAX_STR_SIZE){
    return FAILURE;
  }

  doc->number_of_paragraphs = 0;
  
  strcpy(doc->name,name);

  return SUCCESS;
}

/*Resets the document by setting the number
  of paragraphs to zero*/
int reset_document(Document *doc){
  if(doc==NULL){
    return FAILURE;
  }
  
  doc->number_of_paragraphs = 0;

  return SUCCESS;
}

/*Prints the document. A single new line is  printed 
between paragraphs. A new line is also printed 
if one or both of two or more paragraphs are empty*/ 

int print_document(Document *doc){
  int para_num, line_num;
  /*char *ptr;*/
  
  if(doc==NULL){
    return FAILURE;
  }

  printf("Document name: \"%s\"\n", doc->name);
  printf("Number of Paragraphs: %d\n", doc->number_of_paragraphs);    

  /*How do I traverse the 2-D array that is accessed through a nested Structure?*/
  
  for(para_num = 0; para_num < doc->number_of_paragraphs; para_num++){

    /* printf("Number of Lines: %d\n", doc->paragraphs[para_num].number_of_lines);*/

    for(line_num = 0; line_num < doc->paragraphs[para_num].number_of_lines; line_num++){
  
      if(doc->paragraphs[para_num].lines[line_num] != '\0'){
	printf("%s", doc->paragraphs[para_num].lines[line_num]);
      }
    
      printf("\n");
    }
    if(para_num==0 && doc->number_of_paragraphs > 1){
      printf("\n");
    }

    if(para_num!=0&& doc->paragraphs[para_num+1].number_of_lines != 0 && para_num+1 < doc->number_of_paragraphs){
      if(doc->number_of_paragraphs >= 2 && para_num < doc->number_of_paragraphs && doc->paragraphs[para_num].number_of_lines != 0 ){
	printf("\n");
      } 
    }
    }
 
  return SUCCESS;
}
/*Inserts a paragrpah into the document after
  the index specified by the input. Paragraphs
can be added to the beginning, end, and any other
locations between beginning and end in the document*/
int add_paragraph_after(Document *doc, int paragraph_number){
  int para_num;

  if(doc == NULL || doc->number_of_paragraphs == MAX_PARAGRAPHS || paragraph_number < 0 || paragraph_number > doc->number_of_paragraphs){
    return FAILURE;
  }
  
  doc->number_of_paragraphs += 1;
  
  if(paragraph_number == 0){
   
    for(para_num = doc->number_of_paragraphs-1; para_num >= 1; para_num--){
      doc->paragraphs[para_num] = doc->paragraphs[para_num-1];
    }

    doc->paragraphs[0].number_of_lines = 0;
 
  }else{
    
    
    for(para_num = doc->number_of_paragraphs-1; para_num > paragraph_number; para_num--){  
      doc->paragraphs[para_num] = doc->paragraphs[para_num-1];
    }

    doc->paragraphs[paragraph_number].number_of_lines = 0;

  }
  
  return SUCCESS;
}
/*
Inserts a line that was passed in as input
into a specific paragraph after a specific line,
both specified by input. Lines can be added to 
the beginning, end, or any where between.*/

int add_line_after(Document *doc, int paragraph_number, int line_number, const char *new_line){
  int line_num, index, i = 0, j =0;
  const char *ptr = new_line;
  
  if(doc == NULL || paragraph_number < 1 || paragraph_number-1 > doc->number_of_paragraphs || doc->paragraphs[paragraph_number-1].number_of_lines == MAX_PARAGRAPH_LINES 	
	|| line_number < 0 || line_number > MAX_PARAGRAPH_LINES || new_line == NULL){
    printf("Failure\n");
    return FAILURE;
  
  }
  /* printf("Para #: %d\n", paragraph_number);*/

  if(line_number == 0){ 
    
    doc->paragraphs[paragraph_number-1].number_of_lines += 1;
   
       if(strlen(doc->paragraphs[paragraph_number-1].lines[0]) == 0){
      
	 strcpy(doc->paragraphs[paragraph_number-1].lines[line_number] , new_line);

       }else{

	 for(line_num = doc->paragraphs[paragraph_number-1].number_of_lines; line_num >= 1; line_num--){

	   while(i < strlen(doc->paragraphs[paragraph_number-1].lines[line_num-1])){
	     doc->paragraphs[paragraph_number-1].lines[line_num][i] = doc->paragraphs[paragraph_number-1].lines[line_num-1][i];
	     ptr++;
	     i++;
	   }
	   doc->paragraphs[paragraph_number-1].lines[line_num][i++] = '\0';
   
	 }

	 while(*ptr !='\0'){
	   doc->paragraphs[paragraph_number-1].lines[line_num][j] = *ptr;
	   ptr++;
	   j++;
	 }
      }

    }

  else{
    /*printf("Para #: %d\n", paragraph_number);*/
    
    doc->paragraphs[paragraph_number-1].number_of_lines += 1;

    for(line_num = doc->paragraphs[paragraph_number-1].number_of_lines; line_num >= line_number+1; line_num--){

      while(i < strlen(doc->paragraphs[paragraph_number-1].lines[line_num-1])){
	doc->paragraphs[paragraph_number-1].lines[line_num][i] = doc->paragraphs[paragraph_number-1].lines[line_num-1][i];
	i++;
      }
      doc->paragraphs[paragraph_number-1].lines[line_num][i++] = '\0';

      }
   
    while(*ptr!='\0'){
      doc->paragraphs[paragraph_number-1].lines[line_num][j] = *ptr;
      ptr++;
      j++;
    }

  }
     
  return SUCCESS;
}

/*
Returns that amount of lines in the speficied paragraph
*/

int get_number_lines_paragraph(Document *doc, int paragraph_number, int *number_of_lines){

  if(doc == NULL || number_of_lines == NULL || paragraph_number < 0 || paragraph_number  > doc->number_of_paragraphs){
    return FAILURE;
  }

  number_of_lines = &doc->paragraphs[paragraph_number-1].number_of_lines;
  /*How do I return both number of lines ptr and SUCCESS*/
  
  return SUCCESS;
}

/*
Adds a line to the end of a paragraph, specified by input
 */

int append_line(Document *doc, int paragraph_number, const char *new_line){
  if(doc == NULL || paragraph_number < 0 || paragraph_number > doc->number_of_paragraphs || doc->paragraphs[paragraph_number].number_of_lines == MAX_PARAGRAPH_LINES
     || new_line == NULL){
    return FAILURE;
  }
  doc->paragraphs[paragraph_number-1].number_of_lines++;

  strcpy(doc->paragraphs[paragraph_number-1].lines[doc->paragraphs[paragraph_number-1].number_of_lines-1], new_line);
 
  return SUCCESS;
}

/*
  Removes a specfic line from a specfic paragraph
  by setting it to an empty string and overwriting
  it by shifting the following lines down in position
*/
int remove_line(Document *doc, int paragraph_number, int line_number){
  char empty[MAX_STR_SIZE+1] = {'\0'};
  int line_num, last_line;
  if(doc == NULL || paragraph_number < 0 || paragraph_number > MAX_PARAGRAPHS|| paragraph_number > doc->number_of_paragraphs || line_number < 0 || line_number > MAX_PARAGRAPH_LINES
     || line_number > doc->paragraphs[paragraph_number-1].number_of_lines){
    printf("FAILURE");
    return FAILURE;
  }

  if(doc->paragraphs[paragraph_number-1].number_of_lines == 1){
   
    *doc->paragraphs[paragraph_number-1].lines[line_number] = 0;
  
  }else{

    for(line_num = line_number; line_num < doc->paragraphs[paragraph_number-1].number_of_lines; line_num++){
      strcpy(doc->paragraphs[paragraph_number-1].lines[line_num-1], doc->paragraphs[paragraph_number-1].lines[line_num]);    
    }
    /*strcpy(doc->paragraphs[paragraph_number-1].lines[line_number-1], empty);*/
    last_line = doc->paragraphs[paragraph_number-1].number_of_lines;
   *doc->paragraphs[paragraph_number-1].lines[last_line] = 0;
  }
  doc->paragraphs[paragraph_number-1].number_of_lines--;

  return SUCCESS;
}
/*
  Adds a certain amount of lines from a 2D character 
  array to the end of the document. Makes new paragraphs
  whenever an empty line in the array is found
*/
  
int load_document(Document *doc, char data[][MAX_STR_SIZE + 1], int data_lines){
  int num_of_new_paragraphs, para_count = 0, line_count, data_line_num; 
/*char * data_ptr = data;*/

  if(doc == NULL || data == NULL || data_lines == 0 || doc->number_of_paragraphs+data_lines+1 > MAX_PARAGRAPHS){
    printf("FAILURE");
    return FAILURE;
  }

  add_paragraph_after(doc, doc->number_of_paragraphs);

  for(data_line_num = 0; data_line_num < data_lines; data_line_num++){

    if(data[data_line_num][0] == '\0'){
      
      add_paragraph_after(doc, doc->number_of_paragraphs);

    }else{

     append_line(doc, doc->number_of_paragraphs, data[data_line_num]);

    } 
  }

  /* para_count++;*/

 /*if(doc->paragraphs[para_count].number_of_lines+data_lines > MAX_PARAGRAPH_LINES){
    printf("FAILURE");
    return FAILURE;
    }*/

  /* for(i = 0; i < data_lines; i++){ 

    if(data[i][0] == '\0'){
      add_paragraph_after(doc, para_count);
      para_count++;
      continue;
    }
    strcpy(doc->paragraphs[para_count].lines[line_count], data[i]);
    line_count++;

  } */

  return SUCCESS;

}

/*
Replaces every appearance of the target text value by searching for
a substring in each line that matches the target. That line is copied
to an string variable. The difference in the string and end of the substring
in the line is recorded. This difference is used as a start index for starting
the replacement. From that index, the target text value is replaced by the
target via concatenation. The end value is then determined which is placed 
after the target value. The end index and difference 
in start and end is then set for other iterations.
*/
 
int replace_text(Document *doc, const char *target, const char *replacement){
  int para_num, line_num,/* target_length = strlen(target),*/ diff;
  
  char maybe[MAX_STR_SIZE];
  
  char *found;

  if(doc == NULL || target == NULL || replacement == NULL){
    return FAILURE;
  }


  for(para_num = 0; para_num < doc->number_of_paragraphs; para_num++){
    replace_in_line(doc, target, replacement, found, maybe, para_num, diff); 
  }

  return SUCCESS;
}

/* A lot of stress can be avioded by using the string library avaialble for this project
 Best Practice is to learn all the sting library functions for less stressful coding
 in the future
*/
int replace_in_line(Document *doc, const char *target, const char *replacement, char *found, char maybe[], int para_num, int diff){
  int line_num;
  size_t line_length, i;
  for(line_num = 0; line_num < doc->paragraphs[para_num].number_of_lines; line_num++){

    strcpy(maybe, doc->paragraphs[para_num].lines[line_num]);

    found = strstr(maybe, target);

    if(found){
      diff = found - maybe;
    }

    while(found){
      doc->paragraphs[para_num].lines[line_num][diff] = '\0';

      line_length = strlen(doc->paragraphs[para_num].lines[line_num]);

      for (i = 0 ; i < strlen(replacement) && replacement[i] != '\0' ; i++){
	doc->paragraphs[para_num].lines[line_num][line_length + i] = replacement[i];
      }
	doc->paragraphs[para_num].lines[line_num][line_length + i] = '\0';
      
      found = found + strlen(target);
     

      strcat(doc->paragraphs[para_num].lines[line_num], found);

      found = strstr(found, target);

      if(found){
	diff = strlen(doc->paragraphs[para_num].lines[line_num]) - strlen(found);
      }

    }
  }
return SUCCESS;
}

/*
  Highlights a target text value by surrounding it
  with brackets. Makes a string  filled with
  the brackets surrounding the  target text 
  value and uses the replace_text function 
  to put that string in place of just the target text
  value in the document.
*/  
int highlight_text(Document *doc, const char *target){
  int length,i=0;
  char replace[MAX_STR_SIZE + 1] = {'\0'};

  if(doc==NULL || target ==NULL){
    return FAILURE;
  }
  

  while(replace[i] != '\0'){
    i++;
  }
  replace[i] =(char) HIGHLIGHT_START_STR;
  replace[i+1] = '\0';



  length = strlen(replace);

  for (i = 0 ; i < strlen(target) && target[i] != '\0' ; i++){
    replace[length + i] = target[i];
  }
  replace[length+1] = '\0';



  while(replace[i] != '\0'){
    i++;
  }
  replace[i] =(char) HIGHLIGHT_END_STR;
  replace[i+1] = '\0';


  replace_text(doc, target, replace);

  return SUCCESS;
}

/*
Removes the target text value by calling the
replacing it with an empty string
*/
int remove_text(Document *doc, const char *target){
  int para_num, line_num, line_index, maybe_index, target_index = 0;
  char empty [] = "";

  if(doc == NULL || target ==NULL){
    return FAILURE;
  }

  replace_text(doc, target, empty);

  
  return SUCCESS;
}
